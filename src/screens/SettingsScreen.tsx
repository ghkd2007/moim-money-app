import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Switch,
  Alert,
} from 'react-native';
import { COLORS } from '../constants';
import { logout, getCurrentUser } from '../services/authService';

interface SettingItem {
  id: string;
  title: string;
  subtitle?: string;
  type: 'navigation' | 'switch' | 'action';
  value?: boolean;
  onPress?: () => void;
  onValueChange?: (value: boolean) => void;
  destructive?: boolean;
  icon?: string;
}

const SettingsScreen: React.FC = () => {
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [biometricEnabled, setBiometricEnabled] = useState(false);
  
  const currentUser = getCurrentUser();

  /**
   * Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
   */
  const handleLogout = async () => {
    try {
      await logout();
      Alert.alert('Î°úÍ∑∏ÏïÑÏõÉ', 'ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïò§Î•ò:', error);
      Alert.alert('Ïò§Î•ò', 'Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // ÏÑ§Ï†ï Ìï≠Î™©Îì§ (Í∞ÑÏÜåÌôî)
  const settingSections = [
    {
      title: 'Í≥ÑÏ†ï',
      items: [
        {
          id: 'profile',
          title: 'ÌîÑÎ°úÌïÑ',
          subtitle: currentUser?.displayName || currentUser?.email || 'ÏÇ¨Ïö©Ïûê',
          type: 'navigation' as const,
          icon: 'üë§',
          onPress: () => Alert.alert('ÌîÑÎ°úÌïÑ', 'ÌîÑÎ°úÌïÑ Ìé∏Ïßë Í∏∞Îä•Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.'),
        },
        {
          id: 'change_password',
          title: 'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω',
          subtitle: 'Î≥¥ÏïàÏùÑ ÏúÑÌï¥ Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî',
          type: 'navigation' as const,
          icon: 'üîë',
          onPress: () => Alert.alert('ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω', 'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Í∏∞Îä•Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.'),
        },
      ],
    },
    {
      title: 'ÏïåÎ¶º',
      items: [
        {
          id: 'notifications',
          title: 'Ìë∏Ïãú ÏïåÎ¶º',
          subtitle: 'ÏÉàÎ°úÏö¥ Í±∞Îûò Î∞è ÏóÖÎç∞Ïù¥Ìä∏ ÏïåÎ¶º',
          type: 'switch' as const,
          icon: 'üîî',
          value: notificationsEnabled,
          onValueChange: setNotificationsEnabled,
        },
      ],
    },
    {
      title: 'Î≥¥Ïïà',
      items: [
        {
          id: 'biometric',
          title: 'ÏÉùÏ≤¥ Ïù∏Ï¶ù',
          subtitle: 'ÏßÄÎ¨∏ ÎòêÎäî ÏñºÍµ¥ Ïù∏ÏãùÏúºÎ°ú Ïï± Î≥¥Ïïà Í∞ïÌôî',
          type: 'switch' as const,
          icon: 'üîê',
          value: biometricEnabled,
          onValueChange: setBiometricEnabled,
        },
      ],
    },
    {
      title: 'Îç∞Ïù¥ÌÑ∞',
      items: [
        {
          id: 'export_data',
          title: 'Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞',
          subtitle: 'Excel ÌååÏùºÎ°ú Í±∞Îûò ÎÇ¥Ïó≠ ÎÇ¥Î≥¥ÎÇ¥Í∏∞',
          type: 'navigation' as const,
          icon: 'üìä',
          onPress: () => Alert.alert('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞', 'Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Í∏∞Îä•Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.'),
        },
        {
          id: 'backup',
          title: 'Î∞±ÏóÖ Î∞è Î≥µÏõê',
          subtitle: 'Îç∞Ïù¥ÌÑ∞Î•º ÏïàÏ†ÑÌïòÍ≤å Î∞±ÏóÖÌïòÍ≥† Î≥µÏõê',
          type: 'navigation' as const,
          icon: '‚òÅÔ∏è',
          onPress: () => Alert.alert('Î∞±ÏóÖ', 'Î∞±ÏóÖ Í∏∞Îä•Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.'),
        },
      ],
    },
    {
      title: 'ÏßÄÏõê',
      items: [
        {
          id: 'feedback',
          title: 'ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞',
          subtitle: 'Í∞úÏÑ†ÏÇ¨Ìï≠Ïù¥ÎÇò Î¨∏Ï†úÏ†êÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî',
          type: 'navigation' as const,
          icon: 'üí¨',
          onPress: () => Alert.alert('ÌîºÎìúÎ∞±', 'ÌîºÎìúÎ∞± Í∏∞Îä•Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.'),
        },
        {
          id: 'privacy_policy',
          title: 'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®',
          type: 'navigation' as const,
          icon: 'üìã',
          onPress: () => Alert.alert('Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®', 'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®ÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§.'),
        },
        {
          id: 'terms_of_service',
          title: 'ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä',
          type: 'navigation' as const,
          icon: 'üìÑ',
          onPress: () => Alert.alert('ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä', 'ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥ÄÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§.'),
        },
      ],
    },
    {
      title: 'Ïï± Ï†ïÎ≥¥',
      items: [
        {
          id: 'version',
          title: 'Ïï± Î≤ÑÏ†Ñ',
          subtitle: '1.0.0',
          type: 'navigation' as const,
          icon: '‚ÑπÔ∏è',
          onPress: () => Alert.alert('Ïï± Î≤ÑÏ†Ñ', 'ÌòÑÏû¨ Î≤ÑÏ†Ñ: 1.0.0\nÏµúÏã† Î≤ÑÏ†ÑÏûÖÎãàÎã§.'),
        },
      ],
    },
    {
      title: 'Í≥ÑÏ†ï Í¥ÄÎ¶¨',
      items: [
        {
          id: 'logout',
          title: 'Î°úÍ∑∏ÏïÑÏõÉ',
          type: 'action' as const,
          icon: 'üö™',
          onPress: () => {
            Alert.alert(
              'Î°úÍ∑∏ÏïÑÏõÉ',
              'Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
              [
                { text: 'Ï∑®ÏÜå', style: 'cancel' },
                { text: 'Î°úÍ∑∏ÏïÑÏõÉ', style: 'destructive', onPress: handleLogout },
              ]
            );
          },
        },
        {
          id: 'delete_account',
          title: 'Í≥ÑÏ†ï ÏÇ≠Ï†ú',
          subtitle: 'Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§',
          type: 'action' as const,
          destructive: true,
          icon: '‚ö†Ô∏è',
          onPress: () => {
            Alert.alert(
              'Í≥ÑÏ†ï ÏÇ≠Ï†ú',
              'Ï†ïÎßê Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÎ™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÎ©∞ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.',
              [
                { text: 'Ï∑®ÏÜå', style: 'cancel' },
                { text: 'ÏÇ≠Ï†ú', style: 'destructive', onPress: () => {
                  Alert.alert('Í≥ÑÏ†ï ÏÇ≠Ï†ú', 'Í≥ÑÏ†ï ÏÇ≠Ï†ú Í∏∞Îä•Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.');
                }},
              ]
            );
          },
        },
      ],
    },
  ];

  // ÏÑ§Ï†ï Ìï≠Î™© Î†åÎçîÎßÅ
  const renderSettingItem = (item: SettingItem) => {
    return (
      <TouchableOpacity
        key={item.id}
        style={[
          styles.settingItem,
          item.destructive && styles.destructiveItem,
        ]}
        onPress={item.onPress}
        disabled={item.type === 'switch'}
        activeOpacity={0.7}
      >
        <View style={styles.settingLeft}>
          {item.icon && (
            <Text style={styles.settingIcon}>{item.icon}</Text>
          )}
          <View style={styles.settingContent}>
            <Text style={[
              styles.settingTitle,
              item.destructive && styles.destructiveText,
            ]}>
              {item.title}
            </Text>
            {item.subtitle && (
              <Text style={styles.settingSubtitle}>{item.subtitle}</Text>
            )}
          </View>
        </View>
        
        <View style={styles.settingAction}>
          {item.type === 'switch' && (
            <Switch
              value={item.value}
              onValueChange={item.onValueChange}
              trackColor={{ false: '#E2E8F0', true: COLORS.primary }}
              thumbColor={item.value ? COLORS.surface : '#94A3B8'}
              ios_backgroundColor="#E2E8F0"
            />
          )}
          {item.type === 'navigation' && (
            <Text style={styles.chevron}>‚Ä∫</Text>
          )}
        </View>
      </TouchableOpacity>
    );
  };

  return (
    <View style={styles.container}>
      {/* Ìó§Îçî */}
      <View style={styles.header}>
        <Text style={styles.title}>ÏÑ§Ï†ï</Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {settingSections.map((section, sectionIndex) => (
          <View key={sectionIndex} style={styles.section}>
            <Text style={styles.sectionTitle}>{section.title}</Text>
            <View style={styles.sectionContent}>
              {section.items.map((item, index) => (
                <View key={item.id}>
                  {renderSettingItem(item)}
                  {index < section.items.length - 1 && <View style={styles.separator} />}
                </View>
              ))}
            </View>
          </View>
        ))}

        {/* ÌïòÎã® Ïó¨Î∞± */}
        <View style={styles.bottomSpacing} />
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  header: {
    backgroundColor: COLORS.surface,
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: '800',
    color: COLORS.text,
    textAlign: 'center',
    letterSpacing: -0.5,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  section: {
    marginTop: 24,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: '700',
    color: COLORS.textSecondary,
    marginBottom: 12,
    paddingHorizontal: 4,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  sectionContent: {
    backgroundColor: COLORS.surface,
    borderRadius: 16,
    overflow: 'hidden',
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
  },
  destructiveItem: {
    // ÏúÑÌóòÌïú ÏûëÏóÖ Ìï≠Î™©Ïùò Ï∂îÍ∞Ä Ïä§ÌÉÄÏùºÏùÄ Ïó¨Í∏∞Ïóê
  },
  settingLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  settingIcon: {
    fontSize: 20,
    marginRight: 16,
  },
  settingContent: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.text,
  },
  destructiveText: {
    color: '#DC2626',
  },
  settingSubtitle: {
    fontSize: 14,
    color: COLORS.textSecondary,
    marginTop: 2,
    lineHeight: 20,
  },
  settingAction: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  chevron: {
    fontSize: 20,
    color: COLORS.textSecondary,
    fontWeight: '300',
  },
  separator: {
    height: 1,
    backgroundColor: '#F1F5F9',
    marginLeft: 56, // ÏïÑÏù¥ÏΩò + Ïó¨Î∞±ÎßåÌÅº Îì§Ïó¨Ïì∞Í∏∞
  },
  bottomSpacing: {
    height: 100,
  },
});

export default SettingsScreen;